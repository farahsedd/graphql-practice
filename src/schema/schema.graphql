type Cv {
  id: ID!
  name: String!
  age: Int!
  job: String!
  skills: [Skill!]!
  user: User!
}

type Skill {
  id: ID!
  designation: String!
  cvs: [Cv!]!
}

type User {
  id: ID!
  name: String!
  email: String!
  role: Role!
  cvs: [Cv!]!
  }

type cv_skill{
    id : ID,
    idCv: ID,
    idSkill:ID
}

enum Role {
  USER
  ADMIN
}

type Query{
    hello(name: String): String!
    getAllCvs:[Cv]
    getCvById(id: Int!):Cv
    getAllCvSkills:[cv_skill]
}

input AddCVInput {
  name: String!
  age: String!
  job: String!
  skills: [Int]!
  user: Int!
}

input UpdateCVInput {
  id: Int!
  name: String
  age: String
  job: String
  skills: [Int]
  user: Int
}

type Mutation {
  addCv(input: AddCVInput!): Cv
  updateCv(id: Int!, input: UpdateCVInput!): Cv
  deleteCV(id: Int!): Cv
}

enum MutationOperationType{
  Update 
  Delete 
  Add 
}

type Subscription {
  CVUpdates: CvSubscriptionPayload!
}

type CvSubscriptionPayload{
  Cv:Cv!
  mutation:MutationOperationType!
}